# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui\review.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import logging
import time
from PyQt5 import QtCore, QtWidgets, QtGui
import markdown as md
from random import randint

import jieba
jieba.set_dictionary('.\\dict.txt')
jieba.setLogLevel(logging.INFO)
import jieba.analyse
jieba.analyse.set_idf_path('.\\idf.txt')
jieba.initialize()

import myOperations as oper
from cleanHTML import clean_html


class UIReviewWindow(object):
    def setupUi(self, ReviewWindow: QtWidgets.QWidget):
        ReviewWindow.setObjectName("ReviewWindow")
        ReviewWindow.resize(760, 606)

        self.verticalLayoutWidget = QtWidgets.QWidget(ReviewWindow)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(20, 20, 711, 561))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")

        self.mainLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.mainLayout.setContentsMargins(0, 0, 0, 0)
        self.mainLayout.setObjectName("mainLayout")

        #title
        self.title = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei UI")
        font.setPointSize(26)
        self.title.setFont(font)
        self.title.setIndent(7)
        self.title.setObjectName("title")
        self.mainLayout.addWidget(self.title)

        # HLine
        self.line = QtWidgets.QFrame(self.verticalLayoutWidget)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.mainLayout.addWidget(self.line)

        self.score = QtWidgets.QLabel()
        self.score.setStyleSheet("font-size: 30px; font-family: 微软雅黑;")
        self.score.setText("分数：N/A")
        self.mainLayout.addWidget(self.score)

        self.text = QtWidgets.QTextBrowser(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.text.sizePolicy().hasHeightForWidth())
        self.text.setSizePolicy(sizePolicy)
        self.text.setMinimumSize(QtCore.QSize(0, 350))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(15)
        self.text.setFont(font)
        self.text.setObjectName("text")
        self.mainLayout.addWidget(self.text)

        # a ScrollArea for form
        self.formArea = QtWidgets.QScrollArea(self.verticalLayoutWidget)
        self.formArea.setWidgetResizable(True)
        self.formArea.setObjectName("formArea")
        # child widget for form
        self.formWid = QtWidgets.QWidget()
        self.formWid.setGeometry(QtCore.QRect(0, 0, 707, 172))
        self.formWid.setObjectName("formWid")
        # layout for form
        self.form = QtWidgets.QFormLayout(self.formWid)
        self.formWid.setLayout(self.form)
        self.form.setContentsMargins(0, 0, 0, 0)
        self.form.setObjectName("form")
        self.formArea.setWidget(self.formWid)
        self.mainLayout.addWidget(self.formArea)

        self.checkBtn = QtWidgets.QPushButton()
        self.checkBtn.setObjectName("checkBtn")
        self.checkBtn.clicked.connect(self.check)
        self.mainLayout.addWidget(self.checkBtn)

        self.retranslateUi(ReviewWindow)
        QtCore.QMetaObject.connectSlotsByName(ReviewWindow)

    def retranslateUi(self, ReviewWindow):
        _translate = QtCore.QCoreApplication.translate
        ReviewWindow.setWindowTitle(_translate("ReviewWindow", "EasyNote - 复习"))
        self.title.setText(_translate("title", "复习"))
        self.checkBtn.setText(_translate("checkBtn" ,"检查"))

    def isValidWord(self, word: str):
        if set(word) & set(r"""!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~"""): return False # English puncs
        chineseP = '＂＃＄％＆＇（）＊＋，－／：；＜＝＞＠［＼］＾＿｀｛｜｝～｟｠｢｣､　、〃〈〉《》「」『』【】〔〕〖〗〘〙〚〛〜〝〞〟〰〾〿–—‘’‛“”„‟…‧﹏﹑﹔·！？｡。'
        if set(word) & set(chineseP): return False # Chinese puncs
        if ' ' in word: return False
        if word.strip() == '': return False
        if len(word) <= 1: return False
        return True

    def setupForm(self, file: dict):
        self.file = file
        self.file['text'] = md.markdown(
            self.file['text'],
            extensions=['markdown.extensions.fenced_code', 'markdown.extensions.codehilite', 'markdown.extensions.extra', ]
        )
        
        pureText = clean_html(self.file['text'])

        filecut = jieba.lcut(pureText)
        print(filecut)
        self.spaces = []
        for word in filecut:
            if randint(0,5)==0 and self.isValidWord(word):
                self.spaces.append(word)

        for i in range(len(self.spaces)):
            self.file['text'] = self.file['text'].replace(self.spaces[i], "___%d___"%(i+1), 1)

        richText = str(md.markdown(
            self.file['text'],
            extensions=['markdown.extensions.fenced_code', 'markdown.extensions.codehilite', 'markdown.extensions.extra', ]
        ))
        self.text.setHtml(richText)

        self.inputs = []
        for i in range(len(self.spaces)):
            line = QtWidgets.QLineEdit()
            line.setFixedHeight(20)
            line.setStyleSheet("background-color: white;")
            self.inputs.append(line)
            self.form.addRow('%d: '%(i+1), line)
    
    def check(self):
        score = 0
        for i in range(self.form.rowCount()):
            textField = self.inputs[i]
            if textField.text() == self.spaces[i]:
                score += 1
                textField.setStyleSheet("background-color: rgba(58,255,78,97);")
            else:
                textField.setStyleSheet("background-color: rgba(255,135,143,147);")
        
        score = score / self.form.rowCount() * 10
        self.score.setText("分数：%d"%score)
        
        oper.saveScore(self.file['title'], score, time.localtime(time.time()))